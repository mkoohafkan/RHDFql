% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Driver.R, R/Connection.R, R/Result.R,
%   R/standardops.R
\docType{class}
\name{DBI}
\alias{DBI}
\alias{HDFqlDriver-class}
\alias{show,HDFqlDriver-method}
\alias{dbConnect,HDFqlDriver-method}
\alias{dbUnloadDriver,HDFqlDriver-method}
\alias{dbDataType,HDFqlDriver,ANY-method}
\alias{dbDataType,HDFqlDriver,list-method}
\alias{dbIsValid,HDFqlDriver-method}
\alias{dbGetInfo,HDFqlDriver-method}
\alias{HDFqlConnection-class}
\alias{show,HDFqlConnection-method}
\alias{dbIsValid,HDFqlConnection-method}
\alias{dbDisconnect,HDFqlConnection-method}
\alias{dbSendQuery,HDFqlConnection,character-method}
\alias{dbSendStatement,HDFqlConnection,character-method}
\alias{dbDataType,HDFqlConnection,ANY-method}
\alias{dbQuoteString,HDFqlConnection,character-method}
\alias{dbQuoteIdentifier,HDFqlConnection,character-method}
\alias{HDFqlResult-class}
\alias{show,HDFqlResult-method}
\alias{dbClearResult,HDFqlResult-method}
\alias{dbFetch,HDFqlResult-method}
\alias{dbHasCompleted,HDFqlResult-method}
\alias{dbGetInfo,HDFqlResult-method}
\alias{dbIsValid,HDFqlResult-method}
\alias{dbGetStatement,HDFqlResult-method}
\alias{dbColumnInfo,HDFqlResult-method}
\alias{dbGetRowCount,HDFqlResult-method}
\alias{dbGetRowsAffected,HDFqlResult-method}
\alias{dbBind,HDFqlResult-method}
\alias{dbWriteTable,HDFqlConnection,character,data.frame-method}
\alias{dbReadTable,HDFqlConnection,character-method}
\alias{dbListTables,HDFqlConnection-method}
\alias{dbExistsTable,HDFqlConnection,character-method}
\alias{dbListFields,HDFqlConnection,character-method}
\alias{dbRemoveTable,HDFqlConnection,character-method}
\alias{dbGetInfo,HDFqlConnection-method}
\alias{dbBegin,HDFqlConnection-method}
\alias{dbCommit,HDFqlConnection-method}
\alias{dbRollback,HDFqlConnection-method}
\title{DBI methods}
\usage{
\S4method{show}{HDFqlDriver}(object)

\S4method{dbConnect}{HDFqlDriver}(
  drv,
  db,
  ...,
  bigint = c("integer64", "integer", "numeric", "character")
)

\S4method{dbUnloadDriver}{HDFqlDriver}(drv, ...)

\S4method{dbDataType}{HDFqlDriver,ANY}(dbObj, obj, ...)

\S4method{dbDataType}{HDFqlDriver,list}(dbObj, obj, ...)

\S4method{dbIsValid}{HDFqlDriver}(dbObj, ...)

\S4method{dbGetInfo}{HDFqlDriver}(dbObj, ...)

\S4method{show}{HDFqlConnection}(object)

\S4method{dbIsValid}{HDFqlConnection}(dbObj, ...)

\S4method{dbDisconnect}{HDFqlConnection}(conn, ...)

\S4method{dbSendQuery}{HDFqlConnection,character}(conn, statement, ...)

\S4method{dbSendStatement}{HDFqlConnection,character}(conn, statement, ...)

\S4method{dbDataType}{HDFqlConnection,ANY}(dbObj, obj, ...)

\S4method{dbQuoteString}{HDFqlConnection,character}(conn, x, ...)

\S4method{dbQuoteIdentifier}{HDFqlConnection,character}(conn, x, ...)

\S4method{show}{HDFqlResult}(object)

\S4method{dbClearResult}{HDFqlResult}(res, ...)

\S4method{dbFetch}{HDFqlResult}(res, n = -1, ...)

\S4method{dbHasCompleted}{HDFqlResult}(res, ...)

\S4method{dbGetInfo}{HDFqlResult}(dbObj, ...)

\S4method{dbIsValid}{HDFqlResult}(dbObj, ...)

\S4method{dbGetStatement}{HDFqlResult}(res, ...)

\S4method{dbColumnInfo}{HDFqlResult}(res, ...)

\S4method{dbGetRowCount}{HDFqlResult}(res, ...)

\S4method{dbGetRowsAffected}{HDFqlResult}(res, ...)

\S4method{dbBind}{HDFqlResult}(res, params, ...)

\S4method{dbWriteTable}{HDFqlConnection,character,data.frame}(conn, name, value, overwrite = FALSE, append = FALSE, ...)

\S4method{dbReadTable}{HDFqlConnection,character}(conn, name, ...)

\S4method{dbListTables}{HDFqlConnection}(conn, ...)

\S4method{dbExistsTable}{HDFqlConnection,character}(conn, name, ...)

\S4method{dbListFields}{HDFqlConnection,character}(conn, name, ...)

\S4method{dbRemoveTable}{HDFqlConnection,character}(conn, name, ...)

\S4method{dbGetInfo}{HDFqlConnection}(dbObj, ...)

\S4method{dbBegin}{HDFqlConnection}(conn, ...)

\S4method{dbCommit}{HDFqlConnection}(conn, ...)

\S4method{dbRollback}{HDFqlConnection}(conn, ...)
}
\arguments{
\item{object}{Any R object}

\item{drv}{an object that inherits from \linkS4class{DBIDriver},
or an existing \linkS4class{DBIConnection}
object (in order to clone an existing connection).}

\item{...}{authentication arguments needed by the DBMS instance; these
typically include \code{user}, \code{password}, \code{host}, \code{port}, \code{dbname}, etc.
For details see the appropriate \code{DBIDriver}.}

\item{dbObj}{A object inheriting from \linkS4class{DBIDriver}
or \linkS4class{DBIConnection}}

\item{obj}{An R object whose SQL type we want to determine.}

\item{conn}{A \linkS4class{DBIConnection} object, as returned by
\code{\link[DBI:dbConnect]{dbConnect()}}.}

\item{statement}{a character string containing SQL.}

\item{x}{A character vector to quote as string.}

\item{res}{An object inheriting from \linkS4class{DBIResult}.}

\item{n}{maximum number of records to retrieve per fetch. Use \code{n = -1}
or \code{n = Inf}
to retrieve all pending records.  Some implementations may recognize other
special values.}

\item{params}{A list of bindings, named or unnamed.}

\item{name}{A character string specifying the unquoted DBMS table name,
or the result of a call to \code{\link[DBI:dbQuoteIdentifier]{dbQuoteIdentifier()}}.}

\item{value}{a \link{data.frame} (or coercible to data.frame).}

\item{overwrite}{Allow overwriting the destination table. Cannot be
`TRUE` if `append` is also `TRUE`.}

\item{append}{Allow appending to the destination table. Cannot be
`TRUE` if `overwrite` is also `TRUE`.}
}
\description{
Implementations of pure virtual functions defined in the `DBI` package.
}
